From 7519f061ffcf33e4a8ff437394cbd65df9b3e826 Mon Sep 17 00:00:00 2001
From: AntonRydahl <rydahl2610@gmail.com>
Date: Thu, 31 Aug 2023 12:28:46 -0700
Subject: [PATCH] Proof of concept for offloading std::for_each to GPUs using
 OpenMP.

---
 libcxx/CMakeLists.txt                         |  8 ++++
 .../pstl_backends/cpu_backends/for_each.h     | 19 ++++++++
 libcxx/include/__config                       | 48 ++++++++++++++++++-
 3 files changed, 74 insertions(+), 1 deletion(-)

diff --git a/libcxx/CMakeLists.txt b/libcxx/CMakeLists.txt
index b9d0ed51be26..0e1383ee44eb 100644
--- a/libcxx/CMakeLists.txt
+++ b/libcxx/CMakeLists.txt
@@ -101,6 +101,13 @@ option(LIBCXX_ENABLE_STD_MODULES
     experimental and has additional dependencies. Only enable this when
     interested in testing or developing this module. See
     https://libcxx.llvm.org/Modules.html for more information." OFF)
+option(LIBCXX_ENABLE_OPENMP_OFFLOAD "Enable OpenMP offloading of C++ standard 
+    parallel algorithms. This option will enable an OpenMP offloading backend 
+    rather than an OpenMP SIMD backend." OFF)
+if (LIBCXX_ENABLE_OPENMP_OFFLOAD)
+  message("Exporting _LIBCPP_ENABLE_OPENMP_OFFLOAD=1")
+  set(1 _LIBCPP_ENABLE_OPENMP_OFFLOAD)
+endif()
 
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   set(LIBCXX_DEFAULT_TEST_CONFIG "llvm-libc++-shared-gcc.cfg.in")
@@ -767,6 +774,7 @@ elseif (LIBCXX_HARDENING_MODE STREQUAL "unchecked")
   config_define(0 _LIBCPP_ENABLE_HARDENED_MODE_DEFAULT)
   config_define(0 _LIBCPP_ENABLE_DEBUG_MODE_DEFAULT)
 endif()
+config_define_if(LIBCXX_ENABLE_OPENMP_OFFLOAD _LIBCPP_ENABLE_OPENMP_OFFLOAD)
 # TODO(LLVM 18): Remove this after branching for LLVM 17, this is a simple
 # courtesy for vendors to be notified about this change.
 if (LIBCXX_ENABLE_ASSERTIONS)
diff --git a/libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h b/libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h
index f6f22fdd8713..729bcaab5b47 100644
--- a/libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h
+++ b/libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h
@@ -26,10 +26,29 @@ _LIBCPP_BEGIN_NAMESPACE_STD
 
 template <class _Iterator, class _DifferenceType, class _Function>
 _LIBCPP_HIDE_FROM_ABI _Iterator __simd_walk_1(_Iterator __first, _DifferenceType __n, _Function __f) noexcept {
+  _PSTL_OMP_MAP_TO(__first,__n);
   _PSTL_PRAGMA_SIMD
   for (_DifferenceType __i = 0; __i < __n; ++__i)
     __f(__first[__i]);
+  _PSTL_OMP_MAP_FROM(__first,__n);
+  return __first + __n;
+}
+
+/**
+ * Specialization for std::vector where the base pointer must be extrated to map
+ * the data to and from the GPU.
+*/
 
+template <typename T, class _DifferenceType, class _Function>
+_LIBCPP_HIDE_FROM_ABI std::__wrap_iter<T*> __simd_walk_1(std::__wrap_iter<T*> __first, _DifferenceType __n, _Function __f) noexcept {
+  _PSTL_OMP_MAP_TO(__first,__n);
+  // For std::vector the base pointer of the data buffer needs to be extracted 
+  std::pointer_traits<std::__wrap_iter<T*>> PT;
+  T* data = PT.to_address(__first);
+  _PSTL_PRAGMA_SIMD
+  for (_DifferenceType __i = 0; __i < __n; ++__i)
+    __f(data[__i]);
+  _PSTL_OMP_MAP_FROM(__first,__n);
   return __first + __n;
 }
 
diff --git a/libcxx/include/__config b/libcxx/include/__config
index b503e1d01b10..ccb5c2253dc9 100644
--- a/libcxx/include/__config
+++ b/libcxx/include/__config
@@ -1431,8 +1431,54 @@ __sanitizer_verify_double_ended_contiguous_container(const void*, const void*, c
 // Enable SIMD for compilers that support OpenMP 4.0
 #  if (defined(_OPENMP) && _OPENMP >= 201307)
 
-#    define _PSTL_UDR_PRESENT
+#  ifdef _LIBCPP_ENABLE_OPENMP_OFFLOAD
+
+#include <__iterator/wrap_iter.h>
+#    define _PSTL_PRAGMA_DATA_MAP_TO(NAME,LEN) _PSTL_PRAGMA(omp target enter data map(to:NAME[:LEN]))
+#    define _PSTL_PRAGMA_DATA_MAP_FROM(NAME,LEN) _PSTL_PRAGMA(omp target exit data map(from:NAME[:LEN]))
+
+template <typename T, typename N>
+void OMPMapTo(T data,N length) {
+  _PSTL_PRAGMA(omp target enter data map(to:data[:length]));
+}
+
+/**
+ * Specialization for std::vector
+*/
+
+template <typename T,typename N>
+void OMPMapTo(std::__wrap_iter<T*> w,N length) {
+  std::pointer_traits<std::__wrap_iter<T*>> PT;
+  T* data = PT.to_address(w);
+  _PSTL_PRAGMA(omp target enter data map(to:data[:length]));
+}
+
+template <typename T,typename N>
+void OMPMapFrom(T data,N length) {
+  _PSTL_PRAGMA(omp target exit data map(from:data[:length]));
+}
+
+#    define _PSTL_OMP_MAP_TO(DATA,LEN) OMPMapTo(DATA,LEN)
+#    define _PSTL_OMP_MAP_FROM(DATA,LEN) OMPMapFrom(DATA,LEN)
+
+/**
+ * Specialization for std::vector
+*/
+
+template <typename T,typename N>
+void OMPMapFrom(std::__wrap_iter<T*> w,N length) {
+  std::pointer_traits<std::__wrap_iter<T*>> PT;
+  T* data = PT.to_address(w);
+  _PSTL_PRAGMA(omp target exit data map(from:data[:length]));
+}
+#    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(omp target teams distribute parallel for)
+#    else
 #    define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(omp simd)
+#    define _PSTL_OMP_MAP_TO(DATA,LEN)
+#    define _PSTL_OMP_MAP_FROM(DATA,LEN)
+#    endif
+
+#    define _PSTL_UDR_PRESENT
 #    define _PSTL_PRAGMA_DECLARE_SIMD _PSTL_PRAGMA(omp declare simd)
 #    define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(omp simd reduction(PRM))
 #    define _PSTL_PRAGMA_SIMD_SCAN(PRM) _PSTL_PRAGMA(omp simd reduction(inscan, PRM))
-- 
2.29.1

